
function HTTPGET(url) {
    var req = new XMLHttpRequest();
    req.open("GET", url, false);
    req.send(null);
    return req.responseText;
}

function parseTime(time) {
       var c = time.split(':');
       return parseInt(c[0]) * 60 + parseInt(c[1]);
}

var getDepartures = function() {
    //Get departure info
    var response = HTTPGET("http://api.vasttrafik.se/bin/rest.exe/v1/departureBoard?" +
            "authKey=<API-KEY-HERE>&format=json" +
            "&id=9021014007300000&timeSpan=30&maxDeparturesPerLine=1");
    //Convert to JSON
    var json = JSON.parse(response);

    //Extract the data
    var departures = json.DepartureBoard.Departure;

    departures.sort(function(a, b) {
        var x = parseInt(a.sname); var y = parseInt(b.sname);
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });

    var time = parseTime(json.DepartureBoard.servertime);
    console.log("Server time is " + time);

    var station = departures[0].stop.split(',')[0];
    appMessageQueue.send({"KEY_STATION_NAME": station});
    //Send departure pairs.
    appMessageQueue.send({"KEY_NO_OF_DEPARTURES": departures.length});
    for(var i=0;i<departures.length;i++) {
        var departure = departures[i];
        var lines = departure.sname + " " + departure.direction.split(" via ")[0].replace("gatan", "g.").substring(0,11);

        var times = "";
        if (departure.rtTime)
            times = String(parseTime(departure.rtTime) - time - 1) + " min";
        else
            times = "~" + String(parseTime(departure.time) - time - 1) + " min";
        if (times === "0 min")
            times = "nu";

        appMessageQueue.send({"KEY_LINES": lines, "KEY_TIMES": times});
        console.log(lines);
        console.log(times);
    }
    console.log("Done sent");
    appMessageQueue.send({"KEY_DONE": 1});

};


//From https://gist.github.com/Neal/7688920
var appMessageQueue = {
    queue: [],
    numTries: 0,
    maxTries: 5,
    working: false,
    clear: function() {
        this.queue = [];
        this.working = false;
    },
    isEmpty: function() {
        return this.queue.length === 0;
    },
    nextMessage: function() {
        return this.isEmpty() ? {} : this.queue[0];
    },
    send: function(message) {
        if (message) this.queue.push(message);
        if (this.working) return;
        if (this.queue.length > 0) {
            this.working = true;
            var ack = function() {
                appMessageQueue.numTries = 0;
                appMessageQueue.queue.shift();
                appMessageQueue.working = false;
                appMessageQueue.send();
            };
            var nack = function() {
                appMessageQueue.numTries++;
                appMessageQueue.working = false;
                appMessageQueue.send();
            };
            if (this.numTries >= this.maxTries) {
                console.log('Failed sending AppMessage: ' + JSON.stringify(this.nextMessage()));
                ack();
            }
            console.log('Sending AppMessage: ' + JSON.stringify(this.nextMessage()));
            Pebble.sendAppMessage(this.nextMessage(), ack, nack);
        }
    }
};



Pebble.addEventListener("ready",
  function(e) {
    //App is ready to receive JS messages
    getDepartures();
  }
);

Pebble.addEventListener("appmessage",
  function(e) {
    //Watch wants new data!
    getDepartures();
  }
);

